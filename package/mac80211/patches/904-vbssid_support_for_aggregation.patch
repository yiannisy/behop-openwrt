--- a/net/mac80211/agg-rx.c
+++ b/net/mac80211/agg-rx.c
@@ -87,10 +87,12 @@ void ___ieee80211_stop_rx_ba_session(str
 			   sta->sta.addr, tid);
 
 	/* check if this is a self generated aggregation halt */
-	if (initiator == WLAN_BACK_RECIPIENT && tx)
-		ieee80211_send_delba(sta->sdata, sta->sta.addr,
+	if (initiator == WLAN_BACK_RECIPIENT && tx){
+	  mutex_lock(&local->sta_mtx);
+	  ieee80211_send_delba(sta->sdata, sta->sta.addr,
 				     tid, WLAN_BACK_RECIPIENT, reason);
-
+	  mutex_unlock(&local->sta_mtx);
+	}
 	del_timer_sync(&tid_rx->session_timer);
 
 	call_rcu(&tid_rx->rcu_head, ieee80211_free_tid_rx);
@@ -178,7 +180,7 @@ static void sta_rx_agg_reorder_timer_exp
 	rcu_read_unlock();
 }
 
-static void ieee80211_send_addba_resp(struct ieee80211_sub_if_data *sdata, u8 *da, u16 tid,
+static void ieee80211_send_addba_resp(struct ieee80211_sub_if_data *sdata, u8 *da, u8 *vbssid, u16 tid,
 				      u8 dialog_token, u16 status, u16 policy,
 				      u16 buf_size, u16 timeout)
 {
@@ -195,11 +197,11 @@ static void ieee80211_send_addba_resp(st
 	mgmt = (struct ieee80211_mgmt *) skb_put(skb, 24);
 	memset(mgmt, 0, 24);
 	memcpy(mgmt->da, da, ETH_ALEN);
-	memcpy(mgmt->sa, sdata->vif.addr, ETH_ALEN);
+	memcpy(mgmt->sa, vbssid, ETH_ALEN);
 	if (sdata->vif.type == NL80211_IFTYPE_AP ||
 	    sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||
 	    sdata->vif.type == NL80211_IFTYPE_MESH_POINT)
-		memcpy(mgmt->bssid, sdata->vif.addr, ETH_ALEN);
+		memcpy(mgmt->bssid, vbssid, ETH_ALEN);
 	else if (sdata->vif.type == NL80211_IFTYPE_STATION)
 		memcpy(mgmt->bssid, sdata->u.mgd.bssid, ETH_ALEN);
 	else if (sdata->vif.type == NL80211_IFTYPE_ADHOC)
@@ -352,6 +354,6 @@ end:
 	mutex_unlock(&sta->ampdu_mlme.mtx);
 
 end_no_lock:
-	ieee80211_send_addba_resp(sta->sdata, sta->sta.addr, tid,
+	ieee80211_send_addba_resp(sta->sdata, sta->sta.addr, sta->sta.vbssid, tid,
 				  dialog_token, status, 1, buf_size, timeout);
 }
--- a/net/mac80211/agg-tx.c
+++ b/net/mac80211/agg-tx.c
@@ -60,7 +60,7 @@
  */
 
 static void ieee80211_send_addba_request(struct ieee80211_sub_if_data *sdata,
-					 const u8 *da, u16 tid,
+					 const u8 *da, const u8 *vbssid, u16 tid,
 					 u8 dialog_token, u16 start_seq_num,
 					 u16 agg_size, u16 timeout)
 {
@@ -78,12 +78,12 @@ static void ieee80211_send_addba_request
 	mgmt = (struct ieee80211_mgmt *) skb_put(skb, 24);
 	memset(mgmt, 0, 24);
 	memcpy(mgmt->da, da, ETH_ALEN);
-	memcpy(mgmt->sa, sdata->vif.addr, ETH_ALEN);
+	memcpy(mgmt->sa, vbssid, ETH_ALEN);
 	if (sdata->vif.type == NL80211_IFTYPE_AP ||
 	    sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||
 	    sdata->vif.type == NL80211_IFTYPE_MESH_POINT ||
 	    sdata->vif.type == NL80211_IFTYPE_WDS)
-		memcpy(mgmt->bssid, sdata->vif.addr, ETH_ALEN);
+		memcpy(mgmt->bssid, vbssid, ETH_ALEN);
 	else if (sdata->vif.type == NL80211_IFTYPE_STATION)
 		memcpy(mgmt->bssid, sdata->u.mgd.bssid, ETH_ALEN);
 	else if (sdata->vif.type == NL80211_IFTYPE_ADHOC)
@@ -117,19 +117,29 @@ void ieee80211_send_bar(struct ieee80211
 	struct ieee80211_local *local = sdata->local;
 	struct sk_buff *skb;
 	struct ieee80211_bar *bar;
+	struct sta_info *sta;
 	u16 bar_control = 0;
 
 	skb = dev_alloc_skb(sizeof(*bar) + local->hw.extra_tx_headroom);
 	if (!skb)
 		return;
 
+	/* get station info */
+	mutex_lock(&local->sta_mtx);
+	sta = sta_info_get_bss(sdata, ra);
+	if (!sta) {
+		mutex_unlock(&local->sta_mtx);
+		return;
+	}
+	mutex_unlock(&local->sta_mtx);
+
 	skb_reserve(skb, local->hw.extra_tx_headroom);
 	bar = (struct ieee80211_bar *)skb_put(skb, sizeof(*bar));
 	memset(bar, 0, sizeof(*bar));
 	bar->frame_control = cpu_to_le16(IEEE80211_FTYPE_CTL |
 					 IEEE80211_STYPE_BACK_REQ);
 	memcpy(bar->ra, ra, ETH_ALEN);
-	memcpy(bar->ta, sdata->vif.addr, ETH_ALEN);
+	memcpy(bar->ta, sta->sta.vbssid, ETH_ALEN);
 	bar_control |= (u16)IEEE80211_BAR_CTRL_ACK_POLICY_NORMAL;
 	bar_control |= (u16)IEEE80211_BAR_CTRL_CBMTID_COMPRESSED_BA;
 	bar_control |= (u16)(tid << IEEE80211_BAR_CTRL_TID_INFO_SHIFT);
@@ -457,7 +467,7 @@ void ieee80211_tx_ba_session_handle_star
 	spin_unlock_bh(&sta->lock);
 
 	/* send AddBA request */
-	ieee80211_send_addba_request(sdata, sta->sta.addr, tid,
+	ieee80211_send_addba_request(sdata, sta->sta.addr, sta->sta.vbssid, tid,
 				     tid_tx->dialog_token, start_seq_num,
 				     local->hw.max_tx_aggregation_subframes,
 				     tid_tx->timeout);
@@ -819,10 +829,10 @@ void ieee80211_stop_tx_ba_cb(struct ieee
 		goto unlock_sta;
 	}
 
-	if (tid_tx->stop_initiator == WLAN_BACK_INITIATOR && tid_tx->tx_stop)
-		ieee80211_send_delba(sta->sdata, ra, tid,
+	if (tid_tx->stop_initiator == WLAN_BACK_INITIATOR && tid_tx->tx_stop){
+	  ieee80211_send_delba(sta->sdata, ra, tid,
 			WLAN_BACK_INITIATOR, WLAN_REASON_QSTA_NOT_USE);
-
+	}
 	ieee80211_remove_tid_tx(sta, tid);
 
  unlock_sta:
@@ -878,12 +888,12 @@ void ieee80211_process_addba_resp(struct
 		       sta->sta.addr, tid);
 		goto out;
 	}
-
 	del_timer_sync(&tid_tx->addba_resp_timer);
 
 	ht_dbg(sta->sdata, "switched off addBA timer for %pM tid %d\n",
 	       sta->sta.addr, tid);
 
+
 	/*
 	 * addba_resp_timer may have fired before we got here, and
 	 * caused WANT_STOP to be set. If the stop then was already
--- a/net/mac80211/ht.c
+++ b/net/mac80211/ht.c
@@ -319,21 +319,30 @@ void ieee80211_send_delba(struct ieee802
 	struct ieee80211_local *local = sdata->local;
 	struct sk_buff *skb;
 	struct ieee80211_mgmt *mgmt;
+	struct sta_info *sta;
 	u16 params;
 
 	skb = dev_alloc_skb(sizeof(*mgmt) + local->hw.extra_tx_headroom);
 	if (!skb)
 		return;
 
+	lockdep_assert_held(&local->sta_mtx);
+	/* get station info */
+	/* already locked */
+	sta = sta_info_get_bss(sdata, da);
+	if (!sta) {
+		return;
+	}
+
 	skb_reserve(skb, local->hw.extra_tx_headroom);
 	mgmt = (struct ieee80211_mgmt *) skb_put(skb, 24);
 	memset(mgmt, 0, 24);
 	memcpy(mgmt->da, da, ETH_ALEN);
-	memcpy(mgmt->sa, sdata->vif.addr, ETH_ALEN);
+	memcpy(mgmt->sa, sta->sta.vbssid, ETH_ALEN);
 	if (sdata->vif.type == NL80211_IFTYPE_AP ||
 	    sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||
 	    sdata->vif.type == NL80211_IFTYPE_MESH_POINT)
-		memcpy(mgmt->bssid, sdata->vif.addr, ETH_ALEN);
+		memcpy(mgmt->bssid, sta->sta.vbssid, ETH_ALEN);
 	else if (sdata->vif.type == NL80211_IFTYPE_STATION)
 		memcpy(mgmt->bssid, sdata->u.mgd.bssid, ETH_ALEN);
 	else if (sdata->vif.type == NL80211_IFTYPE_ADHOC)
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -3049,7 +3049,9 @@ static int prepare_for_handlers(struct i
 		if (!bssid) {
 			if (!ether_addr_equal(sdata->vif.addr, hdr->addr1))
 				return 0;
-		} else if (!ieee80211_bssid_match(bssid, sdata->vif.addr)) {
+		} else if ((rx->sta != NULL) && ieee80211_bssid_match(bssid, rx->sta->sta.vbssid)){
+		  /* do nothing and accept the frame. */
+		} else if (!ieee80211_bssid_match(bssid, sdata->vif.addr)){
 			/*
 			 * Accept public action frames even when the
 			 * BSSID doesn't match, this is used for P2P
@@ -3246,6 +3248,7 @@ static void __ieee80211_rx_handle_packet
 
 		rx.sta = sta_info_get_bss(prev, hdr->addr2);
 		rx.sdata = prev;
+
 		ieee80211_prepare_and_rx_handle(&rx, skb, false);
 
 		prev = sdata;
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -981,7 +981,7 @@ struct ieee80211_sta *ieee80211_find_sta
 	 */
 	for_each_sta_info(hw_to_local(hw), addr, sta, nxt) {
 		if (localaddr &&
-		    !ether_addr_equal(sta->sdata->vif.addr, localaddr))
+		    !ether_addr_equal(sta->sta.vbssid, localaddr))
 			continue;
 		if (!sta->uploaded)
 			return NULL;
@@ -1112,8 +1112,8 @@ static void ieee80211_send_null_response
 	nullfunc->frame_control = fc;
 	nullfunc->duration_id = 0;
 	memcpy(nullfunc->addr1, sta->sta.addr, ETH_ALEN);
-	memcpy(nullfunc->addr2, sdata->vif.addr, ETH_ALEN);
-	memcpy(nullfunc->addr3, sdata->vif.addr, ETH_ALEN);
+	memcpy(nullfunc->addr2, sta->sta.vbssid, ETH_ALEN);
+	memcpy(nullfunc->addr3, sta->sta.vbssid, ETH_ALEN);
 
 	skb->priority = tid;
 	skb_set_queue_mapping(skb, ieee802_1d_to_ac[tid]);
